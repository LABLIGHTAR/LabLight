using Microsoft.MixedReality.Toolkit.UI;
using Microsoft.MixedReality.Toolkit.Input;
using Microsoft.MixedReality.Toolkit.Utilities.Solvers;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using TMPro;
using UniRx;
using UnityEngine;
using UnityEngine.UI;
using System.Threading.Tasks;




public class GenericVisualizationsViewController : MonoBehavior
{
        /// <summary>
    /// List of ArDefinitions that specify generic creation rules that need to be applied to any new TrackedObject
    /// </summary>
    private List<ArDefinition> genericArDefinitions = new List<ArDefinition>();

    
    /// <summary>
    /// Dictionary that maps the generic ArDefinition with the corresponding view instances it created
    /// </summary>
    private Dictionary<ArDefinition, List<ArElementViewController>> genericArViews = new Dictionary<ArDefinition, List<ArElementViewController>>();

    private void Awake()
    {
        audioPlayer = ServiceRegistry.GetService<IAudio>();
        ProtocolState.procedureStream.Subscribe(procedureNameChanged).AddTo(this);
        procedureNameChanged(ProtocolState.ProcedureTitle);
    }

    private void OnEnable()
    {
        if (!ProcedureEditorMode)
        {
            //clear definitions
            RebuildScene();
            SessionState.TrackedObjects.ObserveAdd().Subscribe(x => processAddedObject(x.Value)).AddTo(this);
            SessionState.TrackedObjects.ObserveRemove().Subscribe(x => processRemovedObject(x.Value)).AddTo(this);
        }
    }

    private void OnDisable()
    {
        disposeVoice?.Invoke();
        disposeVoice = null;
        ClearScene(); //to remove AM should be handled by ArObject manager
    }

    private void RebuildScene()
    {

        UpdateGenericDefinitions();
        
        // Rebuild augmentations for the detections that are still there
        foreach (var of in SessionState.TrackedObjects)
        {
            processAddedObject(of);
        }
    }

    private void UpdateGenericDefinitions()
    {
        List<ArDefinition> oldGenericArDefinitions = new List<ArDefinition>(genericArDefinitions);

        List<ArDefinition> rebuiltGenericArDefinitions = new List<ArDefinition>();

        if (ProtocolState.procedureDef.Value != null)
        {
            var currentProcedure = ProtocolState.procedureDef.Value;
            if (currentProcedure.globalArElements != null) //should only be called once at beginning of procedure AM
            {
                rebuiltGenericArDefinitions.AddRange(currentProcedure.globalArElements.Where(ar => ar.IsGeneric()));
                genericArDefinitions.RemoveAll(ar => ar.arDefinitionType == ArDefinitionType.Container);
            }
        }

        foreach (var arDefinition in rebuiltGenericArDefinitions)
        {
            if (!genericArDefinitions.Contains(arDefinition))
            {
                genericArDefinitions.Add(arDefinition);
                GenericArDefinitionAdded(arDefinition);
            }
        }

        foreach (var arDefinition in oldGenericArDefinitions)
        {
            if (!rebuiltGenericArDefinitions.Contains(arDefinition))
            {
                genericArDefinitions.Remove(arDefinition);
                GenericArDefinitionRemoved(arDefinition);
            }
        }
    }

    private void GenericArDefinitionAdded(ArDefinition arDefinition)
    {
        Transform parent = ProcedureEditorMode ? null : SessionManager.Instance.CharucoTransform;

        switch (arDefinition.arDefinitionType)
        {
            case ArDefinitionType.Line:
                //not handled
                break;
            case ArDefinitionType.Outline:
                //not handled
                break;
            case ArDefinitionType.Overlay:
                //not handled
                break;
            case ArDefinitionType.Model:
                createModel((ModelArDefinition)arDefinition, parent);
                break;
            case ArDefinitionType.Container:
                createGenericArContainerView((ContainerArDefinition)arDefinition, parent, trackedObject);
                break;
            case ArDefinitionType.Arrow:
                //createArrow((ArrowArDefinition)arDefinition, parent); not handled
                break;
        }
    }

    private void GenericArDefinitionRemoved(ArDefinition arDefinition)
    {
        List<ArElementViewController> arViews;
        if (genericArViews.TryGetValue(arDefinition, out arViews))
        {
            foreach (var arView in arViews)
            {
                Destroy(arView.gameObject);
            }
            genericArViews.Remove(arDefinition);
        }
    }

    private void processAddedObject(TrackedObject trackedObject)
    {

        Transform parent = ProcedureEditorMode ? null : SessionManager.Instance.CharucoTransform;

        // Apply generic definitions
        foreach (var arDefinition in genericArDefinitions)
        {
            switch (arDefinition.arDefinitionType)
            {
                case ArDefinitionType.Outline:
                    createGenericArView(OutlinePrefab, arDefinition, parent, trackedObject);
                    break;
                case ArDefinitionType.Overlay:
                    createGenericArView(OverlayPrefab, arDefinition, parent, trackedObject);
                    break;
                case ArDefinitionType.Mask:
                    createGenericArView(MaskAndTitlePrefab, arDefinition, parent, trackedObject);
                    break;
                case ArDefinitionType.Container:
                    createGenericArContainerView((ContainerArDefinition)arDefinition, parent, trackedObject);
                    break;
                case ArDefinitionType.Model:
                    if (!arDefinition.IsTargeted() || arDefinition.IsOfInterest(trackedObject.label))
                    {
                        createModel((ModelArDefinition)arDefinition, parent, trackedObject);
                    }
                    break;
                case ArDefinitionType.Arrow:
                    // JA not sure what happens here, RS this should generate an arrow for each trackedobject, but also not something that will happen often
                    break;
                case ArDefinitionType.BoundingBox:
                    createGenericArView(BoundingBoxPrefab, arDefinition, parent, trackedObject);
                    break;
                default:
                    Debug.LogError("ArDefinition of type '" + arDefinition.arDefinitionType + "' is not supported as generic definition yet.");
                    break;
            }
        }
    }

    private void processRemovedObject(TrackedObject trackedObject)
    {
        foreach (var arDefinition in genericArDefinitions)
        {
            List<ArElementViewController> views;
            if (genericArViews.TryGetValue(arDefinition, out views))
            {
                var trackedObjectView = (from view in views
                                         where view.TrackedObjects.Contains(trackedObject)
                                         select view).FirstOrDefault();

                if (trackedObjectView)
                {
                    Destroy(trackedObjectView.gameObject);
                    views.Remove(trackedObjectView);
                }
            }
        }
    }

    private void createModel(ModelArDefinition modelArDefinition, Transform parent, TrackedObject trackedObject = null)
    {
        //var prefabPath = ProtocolState.procedureDef.Value.mediaBasePath + "/" + modelArDefinition.url;
        var prefabPath = "Models/" + modelArDefinition.url;
        ServiceRegistry.GetService<IMediaProvider>().GetPrefab(prefabPath).Subscribe(prefab =>
        {
            ArElementViewController arViewPrefab = prefab.GetComponent<ArElementViewController>();
            if (arViewPrefab)
            {
                var prefabInstance = Instantiate(arViewPrefab, parent);
                List<ArElementViewController> views;
                if (!genericArViews.TryGetValue(modelArDefinition, out views))
                {
                    views = new List<ArElementViewController>();
                    genericArViews[modelArDefinition] = views;
                }
                views.Add(prefabInstance);

                prefabInstance.Initialize(modelArDefinition, new List<TrackedObject>() { trackedObject });
            }
            else
            {
                ServiceRegistry.Logger.LogError("Loaded model " + modelArDefinition.url + " does not contain the model script.");
            }
        }, (e) =>
        {
            ServiceRegistry.Logger.LogError("Could not load model " + modelArDefinition.url + ". " + e.ToString());
        });
    }

    private ArElementViewController createGenericArView(ArElementViewController prefab, ArDefinition arDefinition, Transform parent, TrackedObject trackedObject)
    {
        var genericInstance = Instantiate(prefab, parent);
        genericInstance.Initialize(arDefinition, new List<TrackedObject>() { trackedObject });
        List<ArElementViewController> views;
        if (!genericArViews.TryGetValue(arDefinition, out views))
        {
            views = new List<ArElementViewController>();
            genericArViews[arDefinition] = views;
        }
        views.Add(genericInstance);
        return genericInstance;
    }
    private void createGenericArContainerView(ContainerArDefinition containerArDefinition, Transform parent, TrackedObject trackedObject)
    {
        var prefab = (containerArDefinition.layout.layoutType == LayoutType.Vertical) ? WorldContainerVertical : WorldContainerHorizontal;
        var containerViewController = createGenericArView(prefab, containerArDefinition, parent, trackedObject) as ContainerElementViewController;

        var layoutController = containerViewController.GetComponent<LayoutController>();
        var container = layoutController.LayoutGroup;

        if (container != null)
        {
            CreateContentItem(containerArDefinition.layout.contentItems, container, containerViewController, false);
        }
        else
        {
            Debug.LogWarning("Missing LayoutGroup on one of the container prefabs");
        }
    }
    
        //maybe remove AM
    private void createArrow(ArrowArDefinition arrowArDefinition, Transform parent)
    {
        ArrowElementViewController arViewPrefab = ArrowPrefab.GetComponent<ArrowElementViewController>();
        if (arViewPrefab)
        {
            var prefabInstance = Instantiate(ArrowPrefab, parent);

            // Resolve all trackedObjects that this definition wants
            List<TrackedObject> trackedObjects = ResolveTrackedObjects(arrowArDefinition.Targets());

            prefabInstance.Initialize(arrowArDefinition, trackedObjects);
            specificArViews[arrowArDefinition] = prefabInstance;

            // Arrows do not currently support operations
        }
        else
        {
            ServiceRegistry.Logger.LogError("Arrow does not contain arrow controller script.");
        }
    }

    private void procedureDefUpdated(ProcedureDefinition procedure)
    {
        RebuildScene();
    }

    private void procedureNameChanged(string procedureName)
    {
        if (String.IsNullOrEmpty(procedureName))
        {
            procedureDefUpdated(null);
            return;
        }

        loadProcedureSubscription = ServiceRegistry.GetService<IProcedureDataProvider>().GetOrCreateProcedureDefinition(procedureName).First().Subscribe(procedure =>
        {
            procedureDefUpdated(procedure);
        }, (e) =>
        {
            Debug.Log("Error fetching procedure");
            // TODO retry?!
        });
    }

    private void ClearScene()
    {
        foreach (var arView in genericArViews)
        {
            foreach (var view in arView.Value)
            {
                Destroy(view.gameObject);
            }
        }
        genericArViews.Clear();
    }
}